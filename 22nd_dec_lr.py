# -*- coding: utf-8 -*-
"""22nd Dec LR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AlCxlpSJmAofjZZNGMOsijl6RBYHsT8Y
"""

import pandas as pd

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# CLassification"""

# Logistic Regression  - IS a Classification problem !!

# factors says the EMAIL is SPAM
# 1. Sender (suspect emails)
# 2. Content - some words - NSFW
# 3. attachments - non attended attachments
# 4. Word Count - less than 10 words

# Regession line in our case is actually regressing the probablity of happeining of an event .. 
# We take a threshold point (if it is above threshold we say YES and if below we say NO)

"""### Odds"""

# A guy goes for fishing 5 days a week 
# We cacthes fish 2 times & fails 3 times

# Success rate = 2/5  - p

# Failure rate = 3/5  - q

# p + q = 1 ( only if it is a binary event)

#Odds = Chances in favour / Chances against

# Odds = 2/3 = p/q = p /(1 - p)

# log(Odds) = log(p/ (1-p))

# This log(odds) is send to sigmoid function - Sigmoid convert everything between 0 - 1

from sklearn.datasets import load_breast_cancer

data = load_breast_cancer()

data.keys()

print(data.DESCR)

data.keys()

df = pd.DataFrame(data.data, columns= data.feature_names)

df.head()

df["cancer"] = data.target

df.head()

df.shape

df.describe()

df.isna().sum()

plt.figure(figsize=(10, 8))
df.boxplot()
plt.xticks(rotation=90)

sns.heatmap(df.corr(), cmap="Greens")

corr_with_cancer = abs(df.corr()["cancer"])

corr_with_cancer

intresting_cols = corr_with_cancer[corr_with_cancer > 0.5].index

df2 = df.loc[:, intresting_cols]

df2.head()

# Normalization of Continoues Values - MIN MAX SCALER, STANDARD SCALER

# MIN MAX SCALER - Divide the data with the largest value.

from sklearn.preprocessing import MinMaxScaler

mms = MinMaxScaler()

X = df2.drop(columns=["cancer"])
Y = df2[["cancer"]]

X = mms.fit_transform(X)

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(X_train, Y_train )

Y_pred = lr.predict(X_test)

Y_pred

Y_test.cancer

(Y_pred == Y_test.cancer).mean()

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(Y_test.cancer, Y_pred)

confusion_matrix(Y_test.cancer, Y_pred)

